#!/bin/bash

set -eo pipefail

function usage() {
cat << EOF

Import kibana objects to the kibana index for the given user. NOTE: This script
overwrites/updates any objects of the same type and id

usage:
  $0 <username> <objects_json>

  username       The username from which to determine the kibana index
  objects_json   An exported JSON from the export script or Kibana

EOF
exit "1"
}

cd $(dirname "${BASH_SOURCE[0]}")
source env-prep

if [ -z "${1:-}" ] ; then
    usage
fi


pwd=$(dirname $0)
username=$1
file=$2
kibindex=$(${pwd}/kibana-index-name ${username})

if [ "$username" == '$$kibana' ] ; then
    kibindex=.kibana
fi

query="${kibindex}/_bulk"
response=$({
        cat "$file" | python -c '
import sys
import json
obj = json.load(sys.stdin)
for doc in obj:
  hdr = {"index":{"_type":"doc", "_id": doc["_type"]+":"+doc["_id"]}}
  json.dump(hdr, sys.stdout)
  sys.stdout.write("\n")
  line = {"type": doc["_type"], }
  line[doc["_type"]] = doc["_source"]
  json.dump(line, sys.stdout)
  sys.stdout.write("\n")
'
} | oc -n ${LOGGING_NS} exec -i -c elasticsearch $pod -- es_util --query="${query}" -XPOST --data-binary @-
)

echo $response | python -c '
import sys
import json
obj = json.load(sys.stdin)
if obj["errors"]:
    sys.stdout.write(json.dumps(obj, indent=4))
    sys.stdout.write("\n")
else:
    sys.stdout.write("Success")
'
